import json
import validation
import numpy as np
import dfa
import automata_helper

from dfa.draw import write_dot

if __name__ == '__main__':

    ####################################################################################################################
    #                                      Opening JSON File with Tile Encodings                                       #
    ####################################################################################################################
    f = open('new_info.json')
    info = json.load(f)

    tile_types = ['AAL', 'ABL', 'AVL', 'ADL', 'BAL', 'BBL', 'BVL', 'BDL', 'VAL', 'VBL', 'VVL',
                  'VDL', 'DAL', 'DBL', 'DVL', 'DDL', 'AIBL', 'AIVL', 'BIAL', 'VIAL', 'HL', 'AAdL',
                  'ABdL', 'AVdL', 'ADdL', 'BAdL', 'BBdL', 'BVdL', 'BDdL', 'VAdL', 'VBdL', 'VVdL',
                  'VDdL', 'DAdL', 'DBdL', 'DVdL', 'DDdL', 'AIBdL', 'AIVdL', 'BIAdL', 'VIAdL', 'HdL']

    num_tiles = len(tile_types)
    assert num_tiles == 42

    ####################################################################################################################
    #                                  Extracting Propagation Matrices of Tiles                                        #
    ####################################################################################################################
    prop_matrices = []
    tile_prop_dict = {}

    for i in range(0, num_tiles):
        prop_matrix_i = validation.get_prop_matrix(info[tile_types[i]]['concrete propagations'])
        prop_matrices.append(prop_matrix_i)
        tile_prop_dict.update({tile_types[i]: prop_matrix_i})

    props_tuple = set(tuple(array.flatten()) for array in prop_matrices) # Find all unique propagation matrices

    assert len(props_tuple) == 38

    ####################################################################################################################
    #                              Getting the Closure of the Prop Matrices of Tiles                                   #
    ####################################################################################################################

    unique_prop_matrices = [np.array(matrix).reshape(9, 9) for matrix in props_tuple]
    closure, records = validation.get_closure(unique_prop_matrices)

    check_num_closure = 161
    assert len(closure) == check_num_closure

    props_tuple = set(tuple(array.flatten()) for array in closure)
    assert len(props_tuple) == len(closure)

    # Removing duplicates from records
    records_set = set()
    for (A, B, C) in records:
        records_set.add(tuple(A.flatten()) + tuple(B.flatten()) + tuple(C.flatten()))
    records = []
    for item in records_set:
        A = np.array(item[0:81]).reshape(9, 9)
        B = np.array(item[81:162]).reshape(9, 9)
        C = np.array(item[162:243]).reshape(9, 9)
        records.append((A, B, C))

    assert len(records) == check_num_closure*check_num_closure

    ####################################################################################################################
    #                              Checking which Prop Matrices are not 3-colourable                                   #
    ####################################################################################################################

    non_3col_matrices = validation.check_diagonal(closure)
    check_non_col = 27
    assert len(non_3col_matrices) == check_non_col

    tiles_non_col = 0
    non_col_tiles = []
    for matrix in non_3col_matrices:
        if validation.already_exists(matrix, unique_prop_matrices):
            tiles_non_col += 1
            non_col_tiles.append(matrix)

    assert tiles_non_col == 8

    non_col_tiles_names = []
    for matrix in non_col_tiles:
        for key, value in tile_prop_dict.items():
            if np.array_equal(matrix, value):
                non_col_tiles_names.append(key)

    assert non_col_tiles_names == ['DDdL', 'BAL', 'ABL', 'VDL', 'AIVL', 'VIAL', 'AIVdL', 'VIAdL', 'DVL', 'VVL']

    ####################################################################################################################
    #                        Finding which Prop Matrices Lead to non-3-colourable Matrices                             #
    ####################################################################################################################

    special_matrices = validation.leads_to_zero_diag(records)
    assert len(special_matrices) == 51

    ####################################################################################################################
    #                                 Constructing States and Edges of Automaton                                       #
    ####################################################################################################################

    states, tiles_dict, original_aut_transitions = validation.generate_automata(special_matrices, unique_prop_matrices, records)

    ####################################################################################################################
    #                                         Validating Automata Results                                              #
    ####################################################################################################################

    assert len(original_aut_transitions) == 105
    assert len(states) == 51

    adriana_states = {0: np.array([[0, 0, 0, 0, 1, 1, 0, 1, 1],
                                   [0, 0, 1, 0, 1, 1, 0, 1, 1],
                                   [0, 1, 0, 0, 1, 1, 0, 1, 1],
                                   [1, 0, 1, 0, 0, 1, 1, 0, 1],
                                   [1, 0, 1, 0, 0, 0, 1, 0, 1],
                                   [1, 0, 1, 1, 0, 0, 1, 0, 1],
                                   [1, 1, 0, 1, 1, 0, 0, 1, 0],
                                   [1, 1, 0, 1, 1, 0, 1, 0, 0],
                                   [1, 1, 0, 1, 1, 0, 0, 0, 0]]), 1: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                          [1, 0, 0, 1, 1, 1, 1, 1, 1],
                                                                          [1, 0, 0, 1, 1, 1, 1, 1, 1],
                                                                          [1, 1, 1, 0, 1, 0, 1, 1, 1],
                                                                          [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                          [1, 1, 1, 0, 1, 0, 1, 1, 1],
                                                                          [1, 1, 1, 1, 1, 1, 0, 0, 1],
                                                                          [1, 1, 1, 1, 1, 1, 0, 0, 1],
                                                                          [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                      2: np.array([[0, 1, 1, 0, 0, 1, 0, 1, 0],
                              [0, 0, 0, 0, 1, 1, 0, 1, 1],
                              [0, 0, 0, 0, 1, 1, 0, 1, 1],
                              [1, 0, 1, 0, 0, 0, 1, 0, 1],
                              [0, 0, 1, 1, 0, 1, 1, 0, 0],
                              [1, 0, 1, 0, 0, 0, 1, 0, 1],
                              [1, 1, 0, 1, 1, 0, 0, 0, 0],
                              [1, 1, 0, 1, 1, 0, 0, 0, 0],
                              [0, 1, 0, 1, 0, 0, 1, 1, 0]]), 3: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                          [0, 0, 1, 0, 1, 1, 0, 1, 1],
                                                                          [0, 1, 0, 0, 1, 1, 0, 1, 1],
                                                                          [1, 0, 1, 0, 0, 1, 1, 0, 1],
                                                                          [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                          [1, 0, 1, 1, 0, 0, 1, 0, 1],
                                                                          [1, 1, 0, 1, 1, 0, 0, 1, 0],
                                                                          [1, 1, 0, 1, 1, 0, 1, 0, 0],
                                                                          [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                      4: np.array([[0, 1, 1, 0, 1, 0, 0, 0, 1],
                              [0, 0, 0, 0, 1, 1, 0, 1, 1],
                              [0, 0, 0, 0, 1, 1, 0, 1, 1],
                              [1, 0, 1, 0, 0, 0, 1, 0, 1],
                              [1, 0, 0, 1, 0, 1, 0, 0, 1],
                              [1, 0, 1, 0, 0, 0, 1, 0, 1],
                              [1, 1, 0, 1, 1, 0, 0, 0, 0],
                              [1, 1, 0, 1, 1, 0, 0, 0, 0],
                              [1, 0, 0, 0, 1, 0, 1, 1, 0]]), 5: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                          [0, 0, 0, 0, 1, 0, 0, 1, 0],
                                                                          [0, 0, 0, 0, 0, 1, 0, 0, 1],
                                                                          [1, 0, 0, 0, 0, 0, 1, 0, 0],
                                                                          [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                          [0, 0, 1, 0, 0, 0, 0, 0, 1],
                                                                          [1, 0, 0, 1, 0, 0, 0, 0, 0],
                                                                          [0, 1, 0, 0, 1, 0, 0, 0, 0],
                                                                          [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                      6: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                              [1, 0, 1, 1, 1, 1, 1, 1, 1],
                              [1, 1, 0, 1, 1, 1, 1, 1, 1],
                              [1, 1, 1, 0, 1, 1, 1, 1, 1],
                              [0, 0, 0, 0, 0, 0, 0, 0, 0],
                              [1, 1, 1, 1, 1, 0, 1, 1, 1],
                              [1, 1, 1, 1, 1, 1, 0, 1, 1],
                              [1, 1, 1, 1, 1, 1, 1, 0, 1],
                              [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 7: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                          [0, 0, 0, 1, 0, 1, 1, 0, 1],
                                                                          [0, 0, 0, 1, 1, 0, 1, 1, 0],
                                                                          [0, 1, 1, 0, 0, 0, 0, 1, 1],
                                                                          [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                          [1, 1, 0, 0, 0, 0, 1, 1, 0],
                                                                          [0, 1, 1, 0, 1, 1, 0, 0, 0],
                                                                          [1, 0, 1, 1, 0, 1, 0, 0, 0],
                                                                          [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                      8: np.array([[0, 1, 1, 0, 1, 1, 0, 1, 1],
                              [1, 0, 1, 1, 1, 1, 1, 1, 1],
                              [1, 1, 0, 1, 1, 1, 1, 1, 1],
                              [1, 1, 1, 0, 1, 1, 1, 1, 1],
                              [1, 0, 1, 1, 0, 1, 1, 0, 1],
                              [1, 1, 1, 1, 1, 0, 1, 1, 1],
                              [1, 1, 1, 1, 1, 1, 0, 1, 1],
                              [1, 1, 1, 1, 1, 1, 1, 0, 1],
                              [1, 1, 0, 1, 1, 0, 1, 1, 0]]), 9: np.array([[0, 0, 0, 0, 1, 1, 0, 1, 1],
                                                                          [0, 0, 1, 0, 1, 0, 0, 1, 1],
                                                                          [0, 1, 0, 0, 1, 1, 0, 0, 1],
                                                                          [1, 0, 0, 0, 0, 1, 1, 0, 1],
                                                                          [1, 0, 1, 0, 0, 0, 1, 0, 1],
                                                                          [1, 0, 1, 1, 0, 0, 0, 0, 1],
                                                                          [1, 0, 0, 1, 1, 0, 0, 1, 0],
                                                                          [1, 1, 0, 0, 1, 0, 1, 0, 0],
                                                                          [1, 1, 0, 1, 1, 0, 0, 0, 0]]),
                      10: np.array([[0, 0, 0, 1, 1, 1, 1, 1, 1],
                               [1, 0, 1, 1, 0, 1, 1, 0, 1],
                               [1, 1, 0, 1, 1, 0, 1, 1, 0],
                               [0, 1, 1, 0, 1, 1, 0, 1, 1],
                               [1, 1, 1, 0, 0, 0, 1, 1, 1],
                               [1, 1, 0, 1, 1, 0, 1, 1, 0],
                               [0, 1, 1, 0, 1, 1, 0, 1, 1],
                               [1, 0, 1, 1, 0, 1, 1, 0, 1],
                               [1, 1, 1, 1, 1, 1, 0, 0, 0]]), 11: np.array([[0, 1, 1, 0, 1, 1, 0, 1, 1],
                                                                            [0, 0, 0, 0, 1, 1, 0, 1, 1],
                                                                            [0, 0, 0, 0, 1, 1, 0, 1, 1],
                                                                            [1, 0, 1, 0, 0, 0, 1, 0, 1],
                                                                            [1, 0, 1, 1, 0, 1, 1, 0, 1],
                                                                            [1, 0, 1, 0, 0, 0, 1, 0, 1],
                                                                            [1, 1, 0, 1, 1, 0, 0, 0, 0],
                                                                            [1, 1, 0, 1, 1, 0, 0, 0, 0],
                                                                            [1, 1, 0, 1, 1, 0, 1, 1, 0]]),
                      12: np.array([[0, 1, 1, 0, 1, 1, 0, 1, 1],
                               [1, 0, 0, 1, 1, 1, 1, 1, 1],
                               [1, 0, 0, 1, 1, 1, 1, 1, 1],
                               [1, 1, 1, 0, 1, 0, 1, 1, 1],
                               [1, 0, 1, 1, 0, 1, 1, 0, 1],
                               [1, 1, 1, 0, 1, 0, 1, 1, 1],
                               [1, 1, 1, 1, 1, 1, 0, 0, 1],
                               [1, 1, 1, 1, 1, 1, 0, 0, 1],
                               [1, 1, 0, 1, 1, 0, 1, 1, 0]]), 13: np.array([[0, 1, 1, 0, 1, 1, 0, 1, 1],
                                                                            [0, 0, 0, 0, 1, 0, 0, 1, 0],
                                                                            [0, 0, 0, 0, 0, 1, 0, 0, 1],
                                                                            [1, 0, 0, 0, 0, 0, 1, 0, 0],
                                                                            [1, 0, 1, 1, 0, 1, 1, 0, 1],
                                                                            [0, 0, 1, 0, 0, 0, 0, 0, 1],
                                                                            [1, 0, 0, 1, 0, 0, 0, 0, 0],
                                                                            [0, 1, 0, 0, 1, 0, 0, 0, 0],
                                                                            [1, 1, 0, 1, 1, 0, 1, 1, 0]]),
                      14: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 0, 0, 1, 1, 1, 0, 1, 1],
                               [1, 0, 0, 0, 1, 1, 1, 1, 1],
                               [1, 1, 1, 0, 1, 0, 1, 0, 1],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 0, 1, 0, 1, 0, 1, 1, 1],
                               [1, 1, 1, 1, 1, 0, 0, 0, 1],
                               [1, 1, 0, 1, 1, 1, 0, 0, 1],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 15: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [0, 0, 1, 1, 1, 1, 1, 1, 1],
                                                                            [0, 1, 0, 1, 1, 1, 1, 1, 1],
                                                                            [1, 1, 1, 0, 0, 1, 1, 1, 1],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [1, 1, 1, 1, 0, 0, 1, 1, 1],
                                                                            [1, 1, 1, 1, 1, 1, 0, 1, 0],
                                                                            [1, 1, 1, 1, 1, 1, 1, 0, 0],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                      16: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 0, 0, 1, 1, 0, 1, 1, 0],
                               [1, 0, 0, 1, 0, 1, 1, 0, 1],
                               [1, 1, 0, 0, 1, 0, 1, 1, 0],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 1, 1, 0, 1, 0, 0, 1, 1],
                               [1, 0, 1, 1, 0, 1, 0, 0, 1],
                               [0, 1, 1, 0, 1, 1, 0, 0, 1],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 17: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [0, 0, 1, 1, 1, 1, 1, 1, 0],
                                                                            [0, 1, 0, 1, 0, 1, 1, 1, 1],
                                                                            [1, 1, 1, 0, 0, 1, 1, 1, 0],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [0, 1, 1, 1, 0, 0, 1, 1, 1],
                                                                            [1, 1, 1, 1, 0, 1, 0, 1, 0],
                                                                            [0, 1, 1, 1, 1, 1, 1, 0, 0],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                      18: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 0, 1, 1, 0, 1, 0, 0, 0],
                               [1, 1, 0, 0, 0, 0, 1, 1, 0],
                               [0, 1, 1, 0, 1, 1, 0, 0, 0],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 1, 1, 0, 1, 1, 0],
                               [0, 1, 1, 0, 0, 0, 0, 1, 1],
                               [0, 0, 0, 1, 0, 1, 1, 0, 1],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 19: np.array([[0, 1, 1, 0, 1, 1, 0, 1, 1],
                                                                            [0, 0, 1, 0, 1, 1, 0, 1, 1],
                                                                            [0, 1, 0, 0, 1, 1, 0, 1, 1],
                                                                            [1, 0, 1, 0, 0, 1, 1, 0, 1],
                                                                            [1, 0, 1, 1, 0, 1, 1, 0, 1],
                                                                            [1, 0, 1, 1, 0, 0, 1, 0, 1],
                                                                            [1, 1, 0, 1, 1, 0, 0, 1, 0],
                                                                            [1, 1, 0, 1, 1, 0, 1, 0, 0],
                                                                            [1, 1, 0, 1, 1, 0, 1, 1, 0]]),
                      20: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 0, 1, 1, 0, 0, 1, 0, 1],
                               [1, 1, 0, 1, 1, 0, 1, 0, 0],
                               [0, 1, 0, 0, 1, 1, 0, 1, 1],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 1, 0, 1, 1, 0, 0, 1, 0],
                               [0, 0, 1, 0, 1, 1, 0, 1, 1],
                               [1, 0, 1, 0, 0, 1, 1, 0, 1],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 21: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [1, 0, 1, 0, 1, 1, 1, 1, 1],
                                                                            [1, 1, 0, 1, 1, 1, 0, 1, 1],
                                                                            [1, 0, 1, 0, 1, 1, 1, 1, 1],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [1, 1, 1, 1, 1, 0, 1, 0, 1],
                                                                            [1, 1, 0, 1, 1, 1, 0, 1, 1],
                                                                            [1, 1, 1, 1, 1, 0, 1, 0, 1],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                      22: np.array([[0, 1, 1, 1, 1, 1, 1, 1, 1],
                               [0, 0, 1, 1, 1, 1, 1, 1, 0],
                               [0, 1, 0, 1, 0, 1, 1, 1, 1],
                               [1, 1, 1, 0, 0, 1, 1, 1, 0],
                               [1, 1, 1, 1, 0, 1, 1, 1, 1],
                               [0, 1, 1, 1, 0, 0, 1, 1, 1],
                               [1, 1, 1, 1, 0, 1, 0, 1, 0],
                               [0, 1, 1, 1, 1, 1, 1, 0, 0],
                               [1, 1, 1, 1, 1, 1, 1, 1, 0]]), 23: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [1, 0, 1, 0, 1, 0, 1, 1, 1],
                                                                            [1, 1, 0, 1, 1, 1, 0, 0, 1],
                                                                            [1, 0, 0, 0, 1, 1, 1, 1, 1],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [1, 1, 1, 1, 1, 0, 0, 0, 1],
                                                                            [1, 0, 0, 1, 1, 1, 0, 1, 1],
                                                                            [1, 1, 1, 0, 1, 0, 1, 0, 1],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                      24: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 0, 1, 0, 0, 1, 1, 0, 1],
                               [1, 1, 0, 1, 1, 0, 0, 1, 0],
                               [0, 0, 1, 0, 1, 1, 0, 1, 1],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 1, 0, 1, 1, 0, 1, 0, 0],
                               [0, 1, 0, 0, 1, 1, 0, 1, 1],
                               [1, 0, 1, 1, 0, 0, 1, 0, 1],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 25: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [1, 0, 0, 1, 0, 1, 1, 0, 1],
                                                                            [1, 0, 0, 1, 1, 0, 1, 1, 0],
                                                                            [0, 1, 1, 0, 1, 0, 0, 1, 1],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [1, 1, 0, 0, 1, 0, 1, 1, 0],
                                                                            [0, 1, 1, 0, 1, 1, 0, 0, 1],
                                                                            [1, 0, 1, 1, 0, 1, 0, 0, 1],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                      26: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 0, 1, 1, 0, 1, 0, 0, 1],
                               [1, 1, 0, 0, 1, 0, 1, 1, 0],
                               [0, 1, 1, 0, 1, 1, 0, 0, 1],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 0, 0, 1, 1, 0, 1, 1, 0],
                               [0, 1, 1, 0, 1, 0, 0, 1, 1],
                               [1, 0, 0, 1, 0, 1, 1, 0, 1],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 27: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [0, 1, 0, 0, 1, 0, 0, 0, 0],
                                                                            [0, 0, 1, 0, 0, 0, 0, 0, 1],
                                                                            [1, 0, 0, 1, 0, 0, 0, 0, 0],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [0, 0, 0, 0, 0, 1, 0, 0, 1],
                                                                            [1, 0, 0, 0, 0, 0, 1, 0, 0],
                                                                            [0, 0, 0, 0, 1, 0, 0, 1, 0],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                      28: np.array([[0, 1, 1, 0, 1, 0, 0, 0, 1],
                               [0, 1, 0, 0, 1, 1, 0, 0, 1],
                               [0, 0, 1, 0, 1, 0, 0, 1, 1],
                               [1, 0, 1, 1, 0, 0, 0, 0, 1],
                               [1, 0, 0, 1, 0, 1, 0, 0, 1],
                               [1, 0, 0, 0, 0, 1, 1, 0, 1],
                               [1, 1, 0, 0, 1, 0, 1, 0, 0],
                               [1, 0, 0, 1, 1, 0, 0, 1, 0],
                               [1, 0, 0, 0, 1, 0, 1, 1, 0]]), 29: np.array([[0, 1, 1, 0, 1, 0, 0, 0, 1],
                                                                            [0, 1, 0, 0, 1, 0, 0, 1, 0],
                                                                            [0, 0, 1, 0, 0, 1, 0, 0, 1],
                                                                            [1, 0, 0, 1, 0, 0, 1, 0, 0],
                                                                            [1, 0, 0, 1, 0, 1, 0, 0, 1],
                                                                            [0, 0, 1, 0, 0, 1, 0, 0, 1],
                                                                            [1, 0, 0, 1, 0, 0, 1, 0, 0],
                                                                            [0, 1, 0, 0, 1, 0, 0, 1, 0],
                                                                            [1, 0, 0, 0, 1, 0, 1, 1, 0]]),
                      30: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 1, 1, 1, 1, 1, 1, 0, 0],
                               [1, 1, 1, 1, 0, 0, 1, 1, 1],
                               [1, 1, 1, 1, 1, 1, 0, 1, 0],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 1, 0, 1, 1, 1, 1, 1, 1],
                               [1, 1, 1, 0, 0, 1, 1, 1, 1],
                               [0, 0, 1, 1, 1, 1, 1, 1, 1],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 31: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [0, 1, 1, 0, 1, 1, 0, 0, 1],
                                                                            [0, 1, 1, 0, 1, 0, 0, 1, 1],
                                                                            [1, 0, 1, 1, 0, 1, 0, 0, 1],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [1, 0, 0, 1, 0, 1, 1, 0, 1],
                                                                            [1, 1, 0, 0, 1, 0, 1, 1, 0],
                                                                            [1, 0, 0, 1, 1, 0, 1, 1, 0],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                      32: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 1, 0, 1, 1, 1, 0, 0, 1],
                               [1, 0, 1, 0, 1, 0, 1, 1, 1],
                               [1, 1, 1, 1, 1, 0, 0, 0, 1],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 0, 0, 0, 1, 1, 1, 1, 1],
                               [1, 1, 1, 0, 1, 0, 1, 0, 1],
                               [1, 0, 0, 1, 1, 1, 0, 1, 1],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 33: np.array([[0, 1, 1, 0, 1, 1, 0, 1, 1],
                                                                            [0, 1, 1, 0, 1, 0, 0, 0, 1],
                                                                            [0, 1, 1, 0, 1, 0, 0, 0, 1],
                                                                            [1, 0, 0, 1, 0, 1, 0, 0, 1],
                                                                            [1, 0, 1, 1, 0, 1, 1, 0, 1],
                                                                            [1, 0, 0, 1, 0, 1, 0, 0, 1],
                                                                            [1, 0, 0, 0, 1, 0, 1, 1, 0],
                                                                            [1, 0, 0, 0, 1, 0, 1, 1, 0],
                                                                            [1, 1, 0, 1, 1, 0, 1, 1, 0]]),
                      34: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 1, 0, 0, 1, 1, 0, 1, 1],
                               [0, 0, 1, 0, 1, 1, 0, 1, 1],
                               [1, 0, 1, 1, 0, 0, 1, 0, 1],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 0, 1, 0, 0, 1, 1, 0, 1],
                               [1, 1, 0, 1, 1, 0, 1, 0, 0],
                               [1, 1, 0, 1, 1, 0, 0, 1, 0],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 35: np.array([[0, 1, 1, 0, 1, 1, 0, 1, 1],
                                                                            [0, 1, 0, 0, 1, 0, 0, 0, 0],
                                                                            [0, 0, 1, 0, 0, 0, 0, 0, 1],
                                                                            [1, 0, 0, 1, 0, 0, 0, 0, 0],
                                                                            [1, 0, 1, 1, 0, 1, 1, 0, 1],
                                                                            [0, 0, 0, 0, 0, 1, 0, 0, 1],
                                                                            [1, 0, 0, 0, 0, 0, 1, 0, 0],
                                                                            [0, 0, 0, 0, 1, 0, 0, 1, 0],
                                                                            [1, 1, 0, 1, 1, 0, 1, 1, 0]]),
                      36: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 1, 1, 1, 1, 1, 1, 0, 0],
                               [0, 1, 1, 1, 0, 0, 1, 1, 1],
                               [1, 1, 1, 1, 0, 1, 0, 1, 0],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 1, 0, 1, 0, 1, 1, 1, 1],
                               [1, 1, 1, 0, 0, 1, 1, 1, 0],
                               [0, 0, 1, 1, 1, 1, 1, 1, 0],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 37: np.array([[0, 1, 1, 0, 1, 1, 0, 1, 1],
                                                                            [0, 1, 1, 0, 1, 1, 0, 0, 1],
                                                                            [0, 1, 1, 0, 1, 0, 0, 1, 1],
                                                                            [1, 0, 1, 1, 0, 1, 0, 0, 1],
                                                                            [1, 0, 1, 1, 0, 1, 1, 0, 1],
                                                                            [1, 0, 0, 1, 0, 1, 1, 0, 1],
                                                                            [1, 1, 0, 0, 1, 0, 1, 1, 0],
                                                                            [1, 0, 0, 1, 1, 0, 1, 1, 0],
                                                                            [1, 1, 0, 1, 1, 0, 1, 1, 0]]),
                      38: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 1, 1, 1, 1, 1, 1, 0, 1],
                               [1, 1, 1, 1, 1, 0, 1, 1, 1],
                               [1, 1, 1, 1, 1, 1, 0, 1, 1],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 1, 0, 1, 1, 1, 1, 1, 1],
                               [1, 1, 1, 0, 1, 1, 1, 1, 1],
                               [1, 0, 1, 1, 1, 1, 1, 1, 1],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 39: np.array([[0, 1, 1, 0, 1, 0, 0, 0, 1],
                                                                            [0, 1, 1, 0, 1, 1, 0, 0, 1],
                                                                            [0, 1, 1, 0, 1, 0, 0, 1, 1],
                                                                            [1, 0, 1, 1, 0, 1, 0, 0, 1],
                                                                            [1, 0, 0, 1, 0, 1, 0, 0, 1],
                                                                            [1, 0, 0, 1, 0, 1, 1, 0, 1],
                                                                            [1, 1, 0, 0, 1, 0, 1, 1, 0],
                                                                            [1, 0, 0, 1, 1, 0, 1, 1, 0],
                                                                            [1, 0, 0, 0, 1, 0, 1, 1, 0]]),
                      40: np.array([[0, 1, 1, 0, 1, 1, 0, 1, 1],
                               [1, 1, 1, 1, 1, 1, 1, 0, 1],
                               [1, 1, 1, 1, 1, 0, 1, 1, 1],
                               [1, 1, 1, 1, 1, 1, 0, 1, 1],
                               [1, 0, 1, 1, 0, 1, 1, 0, 1],
                               [1, 1, 0, 1, 1, 1, 1, 1, 1],
                               [1, 1, 1, 0, 1, 1, 1, 1, 1],
                               [1, 0, 1, 1, 1, 1, 1, 1, 1],
                               [1, 1, 0, 1, 1, 0, 1, 1, 0]]), 41: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [1, 1, 1, 1, 1, 0, 1, 0, 1],
                                                                            [1, 1, 1, 1, 1, 0, 1, 0, 1],
                                                                            [1, 1, 0, 1, 1, 1, 0, 1, 1],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [1, 1, 0, 1, 1, 1, 0, 1, 1],
                                                                            [1, 0, 1, 0, 1, 1, 1, 1, 1],
                                                                            [1, 0, 1, 0, 1, 1, 1, 1, 1],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                      42: np.array([[0, 1, 1, 0, 1, 1, 0, 1, 1],
                               [1, 1, 1, 1, 1, 0, 1, 0, 1],
                               [1, 1, 1, 1, 1, 0, 1, 0, 1],
                               [1, 1, 0, 1, 1, 1, 0, 1, 1],
                               [1, 0, 1, 1, 0, 1, 1, 0, 1],
                               [1, 1, 0, 1, 1, 1, 0, 1, 1],
                               [1, 0, 1, 0, 1, 1, 1, 1, 1],
                               [1, 0, 1, 0, 1, 1, 1, 1, 1],
                               [1, 1, 0, 1, 1, 0, 1, 1, 0]]), 43: np.array([[0, 0, 0, 0, 1, 1, 0, 1, 1],
                                                                            [0, 1, 1, 0, 1, 0, 0, 0, 1],
                                                                            [0, 1, 1, 0, 1, 0, 0, 0, 1],
                                                                            [1, 0, 0, 1, 0, 1, 0, 0, 1],
                                                                            [1, 0, 1, 0, 0, 0, 1, 0, 1],
                                                                            [1, 0, 0, 1, 0, 1, 0, 0, 1],
                                                                            [1, 0, 0, 0, 1, 0, 1, 1, 0],
                                                                            [1, 0, 0, 0, 1, 0, 1, 1, 0],
                                                                            [1, 1, 0, 1, 1, 0, 0, 0, 0]]),
                      44: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 1, 1, 1, 1, 1, 0, 0, 1],
                               [1, 1, 1, 0, 1, 0, 1, 1, 1],
                               [1, 1, 1, 1, 1, 1, 0, 0, 1],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 0, 0, 1, 1, 1, 1, 1, 1],
                               [1, 1, 1, 0, 1, 0, 1, 1, 1],
                               [1, 0, 0, 1, 1, 1, 1, 1, 1],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 45: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [1, 1, 0, 1, 1, 0, 1, 0, 0],
                                                                            [1, 0, 1, 1, 0, 0, 1, 0, 1],
                                                                            [1, 1, 0, 1, 1, 0, 0, 1, 0],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [0, 1, 0, 0, 1, 1, 0, 1, 1],
                                                                            [1, 0, 1, 0, 0, 1, 1, 0, 1],
                                                                            [0, 0, 1, 0, 1, 1, 0, 1, 1],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                      46: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 1, 1, 0, 1, 0, 1, 0, 1],
                               [1, 1, 1, 1, 1, 0, 0, 0, 1],
                               [1, 0, 0, 1, 1, 1, 0, 1, 1],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 1, 0, 1, 1, 1, 0, 0, 1],
                               [1, 0, 0, 0, 1, 1, 1, 1, 1],
                               [1, 0, 1, 0, 1, 0, 1, 1, 1],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 47: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [0, 1, 1, 0, 1, 0, 0, 1, 1],
                                                                            [0, 1, 1, 0, 1, 1, 0, 0, 1],
                                                                            [1, 0, 0, 1, 0, 1, 1, 0, 1],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [1, 0, 1, 1, 0, 1, 0, 0, 1],
                                                                            [1, 0, 0, 1, 1, 0, 1, 1, 0],
                                                                            [1, 1, 0, 0, 1, 0, 1, 1, 0],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                      48: np.array([[0, 0, 0, 0, 1, 1, 0, 1, 1],
                               [0, 1, 0, 0, 1, 0, 0, 1, 0],
                               [0, 0, 1, 0, 0, 1, 0, 0, 1],
                               [1, 0, 0, 1, 0, 0, 1, 0, 0],
                               [1, 0, 1, 0, 0, 0, 1, 0, 1],
                               [0, 0, 1, 0, 0, 1, 0, 0, 1],
                               [1, 0, 0, 1, 0, 0, 1, 0, 0],
                               [0, 1, 0, 0, 1, 0, 0, 1, 0],
                               [1, 1, 0, 1, 1, 0, 0, 0, 0]]), 49: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [1, 1, 0, 1, 1, 0, 0, 1, 0],
                                                                            [1, 0, 1, 0, 0, 1, 1, 0, 1],
                                                                            [1, 1, 0, 1, 1, 0, 1, 0, 0],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [0, 0, 1, 0, 1, 1, 0, 1, 1],
                                                                            [1, 0, 1, 1, 0, 0, 1, 0, 1],
                                                                            [0, 1, 0, 0, 1, 1, 0, 1, 1],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                      50: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 1, 0, 0, 1, 0, 1, 1, 0],
                               [1, 0, 1, 1, 0, 1, 0, 0, 1],
                               [1, 0, 0, 1, 1, 0, 1, 1, 0],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 1, 1, 0, 1, 1, 0, 0, 1],
                               [1, 0, 0, 1, 0, 1, 1, 0, 1],
                               [0, 1, 1, 0, 1, 0, 0, 1, 1],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0]])}

    mapping, reverse_mapping = validation.compare_dict_values(states, adriana_states)

    adriana_edges = [(0, 5, 39), (1, 5, 41), (2, 5, 33), (3, 28, 6), (3, 5, 31), (4, 31, 12), (4, 3, 42), (4, 5, 43), (5, 0, 41),
                     (5, 28, 14), (5, 1, 44), (5, 30, 15), (5, 31, 16), (5, 2, 30), (5, 3, 45), (5, 33, 6), (5, 4, 32),
                     (5, 34, 49), (5, 35, 6), (5, 5, 27), (5, 36, 17), (5, 37, 6), (5, 38, 6), (5, 6, 38), (5, 7, 18),
                     (6, 5, 38), (7, 29, 6), (7, 34, 38), (7, 5, 20), (8, 5, 40), (9, 5, 28), (11, 5, 33), (12, 5, 42),
                     (13, 5, 35), (13, 36, 22), (14, 31, 6), (14, 3, 38), (14, 5, 46), (15, 5, 38), (16, 4, 38), (16, 5, 45),
                     (17, 35, 6), (17, 5, 38), (18, 29, 38), (18, 34, 6), (18, 5, 24), (19, 5, 37), (20, 5, 25), (21, 5, 44),
                     (23, 5, 32), (24, 5, 26), (25, 34, 38), (25, 5, 20), (26, 34, 6), (26, 5, 24), (27, 0, 21), (27, 28, 32),
                     (27, 1, 1), (27, 30, 30), (27, 31, 31), (27, 2, 15), (27, 3, 3), (27, 33, 38), (27, 4, 14), (27, 34, 34),
                     (27, 35, 38), (27, 5, 5), (27, 36, 36), (27, 37, 38), (27, 38, 38), (27, 6, 6), (27, 7, 7), (28, 31, 40),
                     (28, 3, 8), (28, 5, 9), (29, 5, 48), (29, 7, 10), (30, 5, 6), (31, 4, 6), (31, 5, 3), (32, 31, 38),
                     (32, 3, 6), (32, 5, 23), (33, 5, 11), (34, 5, 47), (35, 5, 13), (36, 35, 38), (36, 5, 6), (37, 5, 19),
                     (38, 5, 6), (39, 5, 0), (40, 5, 8), (41, 5, 1), (42, 5, 12), (43, 5, 4), (44, 5, 21), (45, 28, 38),
                     (45, 5, 16), (46, 5, 14), (47, 5, 34), (47, 7, 6), (48, 5, 29), (49, 5, 50), (50, 5, 49), (50, 7, 38)]

    assert len(adriana_edges) == len(original_aut_transitions)

    numbered_transitions = validation.convert_raw_transitions(original_aut_transitions, states)
    # Converting my numbered transitions into Adriana's numbering
    translated_transitions = validation.convert_num_transitions(numbered_transitions, mapping)
    comparison = validation.compare_automata_transitions(translated_transitions, adriana_edges)
    assert comparison == True

    for a_edge in adriana_edges:
        if a_edge not in translated_transitions:
            print("OQO!!")
            break

    for mar_edge in translated_transitions:
        if mar_edge not in adriana_edges:
            print("OQO2!!")
            break

    mari_set = set(translated_transitions)
    adri_set = set(adriana_edges)

    assert mari_set - adri_set == set()
    assert adri_set - mari_set == set()

    # Converting Adriana's numbers into my numbers
    reverse_translated_transitions = validation.convert_num_transitions(adriana_edges, reverse_mapping)
    comparison = validation.compare_automata_transitions(numbered_transitions, reverse_translated_transitions)

    assert comparison == True

    mari_set = set(numbered_transitions)
    adri_set = set(reverse_translated_transitions)

    assert mari_set - adri_set == set()
    assert adri_set - mari_set == set()

    ####################################################################################################################
    #                                          Constructing the Automata                                               #
    ####################################################################################################################

    start_vertex = -1  # Represents identity matrix
    states.update({start_vertex: np.array([[1, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 1, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 1, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 1, 0, 0, 0, 0, 0],
                               [0, 0, 0, 0, 1, 0, 0, 0, 0],
                               [0, 0, 0, 0, 0, 1, 0, 0, 0],
                               [0, 0, 0, 0, 0, 0, 1, 0, 0],
                               [0, 0, 0, 0, 0, 0, 0, 1, 0],
                               [0, 0, 0, 0, 0, 0, 0, 0, 1]])})
    aut_alphabet = set(tiles_dict.keys())

    final_states = automata_helper.get_final_states(non_3col_matrices, states)
    assert len(final_states) == 27

    start_transitions = []
    for tile in tiles_dict.keys():
        start_transitions.append((start_vertex, tile, tile))

    mapping.update({-1: -1})
    conv_start_trans = validation.convert_num_transitions(start_transitions, mapping)

    numbered_transitions += start_transitions
    reverse_translated_transitions += start_transitions
    adriana_edges += conv_start_trans

    conv_final_states = []
    for final_state in final_states:
        conv_final_states.append(mapping[final_state])

    conv_alphabet = []
    for tile in aut_alphabet:
        conv_alphabet.append(mapping[conv_alphabet])
    automata = dfa.DFA(
        start=start_vertex,
        inputs=conv_alphabet,
        label=lambda s: automata_helper.is_final_state(s, conv_final_states),
        transition=lambda s, c: automata_helper.get_transition(s, c, adriana_edges),
    )

    dfa_dict = dfa.dfa2dict(automata)
    write_dot(automata, "C:\\Users\\marie\\PycharmProjects\\2cc_validation\\dfa2.dot")
    print(dfa.dfa2dict(automata))

    automata_tiles = {}
    for key, value in tiles_dict.items():
        for tile_name, prop_matrix in tile_prop_dict.items():
            if np.array_equal(value, prop_matrix):
                automata_tiles.update({key: tile_name})
                continue

    print(automata_tiles)
    f = open("rels.txt", "a")
    formatted_strings = []
    for key, value in states.items():
        formatted_string = f"{key}:{value}"
        formatted_strings.append(formatted_string)
    string_dict = '\n'.join(formatted_strings) + '\n'
    f.write(string_dict)
    f.close()
    print(final_states)
