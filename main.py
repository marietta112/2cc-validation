import json
import validation
import numpy as np
import dfa

import validation

def get_key(my_dict, val):
    for key, value in my_dict.items():
        if np.array_equal(val, value):
            return key

def is_final_state(state, final_states):
   if state not in final_states:
      return False
   else:
      return True

def get_transition(state, letter, transitions):
   for transition in transitions:
      if transition[0] == state and transition[1] == letter:
         return transition[2]

def find_dup(props, tiles_map):
    unique_props = []
    for prop in props:
        if not validation.already_exists(prop, unique_props):
            unique_props.append(prop)

if __name__ == '__main__':


    # Opening JSON file
    f = open('new_info.json')

    # returns JSON object as
    # a dictionary
    info = json.load(f)

    tile_types = ['AAL', 'ABL', 'AVL', 'ADL', 'BAL', 'BBL', 'BVL', 'BDL', 'VAL', 'VBL', 'VVL',
         'VDL', 'DAL', 'DBL', 'DVL', 'DDL', 'AIBL', 'AIVL', 'BIAL', 'VIAL', 'HL', 'AAdL',
         'ABdL', 'AVdL', 'ADdL', 'BAdL', 'BBdL', 'BVdL', 'BDdL', 'VAdL', 'VBdL', 'VVdL',
         'VDdL', 'DAdL', 'DBdL', 'DVdL', 'DDdL', 'AIBdL', 'AIVdL', 'BIAdL', 'VIAdL', 'HdL']

    num_tiles = 42
    assert len(tile_types) == num_tiles

    # simple test
    prop_matrix = validation.get_prop_matrix(info[tile_types[0]]['concrete propagations'])
    # print(prop_matrix)

    vvl_prop_matrix = validation.get_prop_matrix(info[tile_types[10]]['concrete propagations'])
    aibl_prop_matrix = validation.get_prop_matrix(info[tile_types[16]]['concrete propagations'])
    print("VVL & AIBL Prop Matrices")
    print(vvl_prop_matrix, "\n", aibl_prop_matrix)
    print(np.matmul(np.matmul(vvl_prop_matrix, aibl_prop_matrix), vvl_prop_matrix)) # VVL.AIBL.VVL = J
    print(np.matmul(vvl_prop_matrix, aibl_prop_matrix)) # VVL.AIBL = a matrix which is not the identity

    # Generate all propagation matrices
    prop_matrices = []
    tile_prop_dict = {}
    j = 0
    for i in range(0, (num_tiles)):
        prop_matrix_i = validation.get_prop_matrix(info[tile_types[i]]['concrete propagations'])
        prop_matrices.append(prop_matrix_i)
        tile_prop_dict.update({tile_types[i]: prop_matrix_i})
    test_tile_prop_dict = {'AAL': np.array([[0, 1, 1, 0, 0, 1, 0, 1, 0],
       [0, 1, 0, 0, 1, 0, 0, 1, 0],
       [0, 0, 1, 0, 0, 1, 0, 0, 1],
       [1, 0, 0, 1, 0, 0, 1, 0, 0],
       [0, 0, 1, 1, 0, 1, 1, 0, 0],
       [0, 0, 1, 0, 0, 1, 0, 0, 1],
       [1, 0, 0, 1, 0, 0, 1, 0, 0],
       [0, 1, 0, 0, 1, 0, 0, 1, 0],
       [0, 1, 0, 1, 0, 0, 1, 1, 0]]), 'ABL': np.array([[0, 0, 0, 0, 1, 1, 0, 1, 1],
       [0, 0, 1, 0, 1, 1, 0, 1, 1],
       [0, 1, 0, 0, 1, 1, 0, 1, 1],
       [1, 0, 1, 0, 0, 1, 1, 0, 1],
       [1, 0, 1, 0, 0, 0, 1, 0, 1],
       [1, 0, 1, 1, 0, 0, 1, 0, 1],
       [1, 1, 0, 1, 1, 0, 0, 1, 0],
       [1, 1, 0, 1, 1, 0, 1, 0, 0],
       [1, 1, 0, 1, 1, 0, 0, 0, 0]]), 'AVL': np.array([[0, 1, 1, 0, 1, 0, 0, 0, 1],
       [0, 1, 0, 0, 1, 1, 0, 0, 1],
       [0, 0, 1, 0, 1, 0, 0, 1, 1],
       [1, 0, 1, 1, 0, 0, 0, 0, 1],
       [1, 0, 0, 1, 0, 1, 0, 0, 1],
       [1, 0, 0, 0, 0, 1, 1, 0, 1],
       [1, 1, 0, 0, 1, 0, 1, 0, 0],
       [1, 0, 0, 1, 1, 0, 0, 1, 0],
       [1, 0, 0, 0, 1, 0, 1, 1, 0]]), 'ADL': np.array([[0, 1, 1, 0, 1, 0, 0, 0, 1],
       [0, 1, 0, 0, 1, 0, 0, 1, 0],
       [0, 0, 1, 0, 0, 1, 0, 0, 1],
       [1, 0, 0, 1, 0, 0, 1, 0, 0],
       [1, 0, 0, 1, 0, 1, 0, 0, 1],
       [0, 0, 1, 0, 0, 1, 0, 0, 1],
       [1, 0, 0, 1, 0, 0, 1, 0, 0],
       [0, 1, 0, 0, 1, 0, 0, 1, 0],
       [1, 0, 0, 0, 1, 0, 1, 1, 0]]), 'BAL': np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 0, 0, 1, 1, 1, 1, 1, 1],
       [1, 0, 0, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 0, 1, 0, 1, 1, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 1, 1, 0, 1, 0, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 0, 0, 1],
       [1, 1, 1, 1, 1, 1, 0, 0, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 'BBL': np.array([[1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1]]), 'BVL': np.array([[1, 1, 1, 1, 1, 1, 1, 1, 1],
       [0, 0, 0, 1, 0, 0, 1, 0, 0],
       [0, 0, 0, 1, 0, 0, 1, 0, 0],
       [0, 1, 0, 0, 0, 0, 0, 1, 0],
       [1, 1, 1, 1, 1, 1, 1, 1, 1],
       [0, 1, 0, 0, 0, 0, 0, 1, 0],
       [0, 0, 1, 0, 0, 1, 0, 0, 0],
       [0, 0, 1, 0, 0, 1, 0, 0, 0],
       [1, 1, 1, 1, 1, 1, 1, 1, 1]]), 'BDL': np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 1, 1, 1, 1, 1, 1, 0, 0],
       [1, 1, 1, 1, 0, 0, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 0, 1, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 1, 0, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 0, 0, 1, 1, 1, 1],
       [0, 0, 1, 1, 1, 1, 1, 1, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 'VAL': np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 1, 1, 0, 1, 1, 0, 0, 1],
       [0, 1, 1, 0, 1, 0, 0, 1, 1],
       [1, 0, 1, 1, 0, 1, 0, 0, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 0, 0, 1, 0, 1, 1, 0, 1],
       [1, 1, 0, 0, 1, 0, 1, 1, 0],
       [1, 0, 0, 1, 1, 0, 1, 1, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 'VBL': np.array([[0, 1, 1, 0, 1, 1, 0, 1, 1],
       [0, 1, 1, 0, 0, 1, 0, 1, 0],
       [0, 1, 1, 0, 0, 1, 0, 1, 0],
       [0, 0, 1, 1, 0, 1, 1, 0, 0],
       [1, 0, 1, 1, 0, 1, 1, 0, 1],
       [0, 0, 1, 1, 0, 1, 1, 0, 0],
       [0, 1, 0, 1, 0, 0, 1, 1, 0],
       [0, 1, 0, 1, 0, 0, 1, 1, 0],
       [1, 1, 0, 1, 1, 0, 1, 1, 0]]), 'VVL': np.array([[0, 1, 1, 0, 0, 1, 0, 1, 0],
       [0, 0, 0, 0, 1, 1, 0, 1, 1],
       [0, 0, 0, 0, 1, 1, 0, 1, 1],
       [1, 0, 1, 0, 0, 0, 1, 0, 1],
       [0, 0, 1, 1, 0, 1, 1, 0, 0],
       [1, 0, 1, 0, 0, 0, 1, 0, 1],
       [1, 1, 0, 1, 1, 0, 0, 0, 0],
       [1, 1, 0, 1, 1, 0, 0, 0, 0],
       [0, 1, 0, 1, 0, 0, 1, 1, 0]]), 'VDL': np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 1, 1, 0, 1, 1],
       [0, 1, 0, 0, 1, 1, 0, 1, 1],
       [1, 0, 1, 0, 0, 1, 1, 0, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 0, 1, 1, 0, 0, 1, 0, 1],
       [1, 1, 0, 1, 1, 0, 0, 1, 0],
       [1, 1, 0, 1, 1, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 'DAL': np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 1, 1, 0, 1, 1, 0, 1, 0],
       [0, 1, 1, 0, 0, 1, 0, 1, 1],
       [1, 0, 1, 1, 0, 1, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 1, 0, 1, 1, 0, 1],
       [1, 1, 0, 1, 0, 0, 1, 1, 0],
       [0, 1, 0, 1, 1, 0, 1, 1, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 'DBL': np.array([[0, 1, 1, 0, 1, 1, 0, 1, 1],
       [0, 1, 1, 0, 1, 0, 0, 0, 1],
       [0, 1, 1, 0, 1, 0, 0, 0, 1],
       [1, 0, 0, 1, 0, 1, 0, 0, 1],
       [1, 0, 1, 1, 0, 1, 1, 0, 1],
       [1, 0, 0, 1, 0, 1, 0, 0, 1],
       [1, 0, 0, 0, 1, 0, 1, 1, 0],
       [1, 0, 0, 0, 1, 0, 1, 1, 0],
       [1, 1, 0, 1, 1, 0, 1, 1, 0]]), 'DVL': np.array([[0, 1, 1, 0, 1, 0, 0, 0, 1],
       [0, 0, 0, 0, 1, 1, 0, 1, 1],
       [0, 0, 0, 0, 1, 1, 0, 1, 1],
       [1, 0, 1, 0, 0, 0, 1, 0, 1],
       [1, 0, 0, 1, 0, 1, 0, 0, 1],
       [1, 0, 1, 0, 0, 0, 1, 0, 1],
       [1, 1, 0, 1, 1, 0, 0, 0, 0],
       [1, 1, 0, 1, 1, 0, 0, 0, 0],
       [1, 0, 0, 0, 1, 0, 1, 1, 0]]), 'DDL': np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 1, 0, 0, 1, 1, 0, 1, 1],
       [0, 0, 1, 0, 1, 1, 0, 1, 1],
       [1, 0, 1, 1, 0, 0, 1, 0, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 0, 1, 0, 0, 1, 1, 0, 1],
       [1, 1, 0, 1, 1, 0, 1, 0, 0],
       [1, 1, 0, 1, 1, 0, 0, 1, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 'AIBL': np.array([[0, 1, 1, 0, 1, 1, 0, 1, 1],
       [0, 1, 0, 0, 1, 0, 0, 0, 0],
       [0, 0, 1, 0, 0, 0, 0, 0, 1],
       [1, 0, 0, 1, 0, 0, 0, 0, 0],
       [1, 0, 1, 1, 0, 1, 1, 0, 1],
       [0, 0, 0, 0, 0, 1, 0, 0, 1],
       [1, 0, 0, 0, 0, 0, 1, 0, 0],
       [0, 0, 0, 0, 1, 0, 0, 1, 0],
       [1, 1, 0, 1, 1, 0, 1, 1, 0]]), 'AIVL': np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 1, 0, 0, 1, 0],
       [0, 0, 0, 0, 0, 1, 0, 0, 1],
       [1, 0, 0, 0, 0, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 0, 0, 0, 0, 1],
       [1, 0, 0, 1, 0, 0, 0, 0, 0],
       [0, 1, 0, 0, 1, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 'BIAL': np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 1, 1, 1, 1, 1, 1, 0, 0],
       [0, 1, 1, 1, 0, 0, 1, 1, 1],
       [1, 1, 1, 1, 0, 1, 0, 1, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 1, 0, 1, 0, 1, 1, 1, 1],
       [1, 1, 1, 0, 0, 1, 1, 1, 0],
       [0, 0, 1, 1, 1, 1, 1, 1, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 'VIAL': np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 0, 1, 0, 0, 1, 0],
       [0, 0, 0, 0, 0, 1, 0, 0, 1],
       [1, 0, 0, 0, 0, 0, 1, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 1, 0, 0, 0, 0, 0, 1],
       [1, 0, 0, 1, 0, 0, 0, 0, 0],
       [0, 1, 0, 0, 1, 0, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 'HL': np.array([[0, 1, 1, 0, 1, 1, 0, 1, 1],
       [0, 1, 1, 0, 1, 1, 0, 0, 1],
       [0, 1, 1, 0, 1, 0, 0, 1, 1],
       [1, 0, 1, 1, 0, 1, 0, 0, 1],
       [1, 0, 1, 1, 0, 1, 1, 0, 1],
       [1, 0, 0, 1, 0, 1, 1, 0, 1],
       [1, 1, 0, 0, 1, 0, 1, 1, 0],
       [1, 0, 0, 1, 1, 0, 1, 1, 0],
       [1, 1, 0, 1, 1, 0, 1, 1, 0]]), 'AAdL': np.array([[1, 0, 0, 1, 0, 0, 1, 0, 0],
       [1, 0, 0, 1, 0, 0, 1, 0, 0],
       [1, 0, 0, 1, 0, 0, 1, 0, 0],
       [0, 1, 0, 0, 1, 0, 0, 1, 0],
       [0, 1, 0, 0, 1, 0, 0, 1, 0],
       [0, 1, 0, 0, 1, 0, 0, 1, 0],
       [0, 0, 1, 0, 0, 1, 0, 0, 1],
       [0, 0, 1, 0, 0, 1, 0, 0, 1],
       [0, 0, 1, 0, 0, 1, 0, 0, 1]]), 'ABdL': np.array([[0, 0, 0, 1, 1, 1, 1, 1, 1],
       [1, 1, 0, 1, 1, 1, 1, 1, 1],
       [1, 0, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 0, 1, 1, 1],
       [1, 1, 1, 0, 0, 0, 1, 1, 1],
       [1, 1, 1, 0, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 0, 1],
       [1, 1, 1, 1, 1, 1, 0, 1, 1],
       [1, 1, 1, 1, 1, 1, 0, 0, 0]]), 'AVdL': np.array([[1, 1, 1, 1, 0, 1, 1, 1, 0],
       [1, 0, 1, 1, 1, 1, 1, 1, 0],
       [1, 1, 0, 1, 0, 1, 1, 1, 1],
       [1, 1, 1, 0, 1, 1, 1, 1, 0],
       [0, 1, 1, 1, 1, 1, 1, 1, 0],
       [0, 1, 1, 1, 1, 0, 1, 1, 1],
       [1, 1, 1, 1, 0, 1, 0, 1, 1],
       [0, 1, 1, 1, 1, 1, 1, 0, 1],
       [0, 1, 1, 1, 0, 1, 1, 1, 1]]), 'ADdL': np.array([[1, 1, 1, 1, 0, 1, 1, 1, 0],
       [1, 0, 1, 1, 0, 1, 1, 0, 1],
       [1, 1, 0, 1, 1, 0, 1, 1, 0],
       [0, 1, 1, 0, 1, 1, 0, 1, 1],
       [0, 1, 1, 1, 1, 1, 1, 1, 0],
       [1, 1, 0, 1, 1, 0, 1, 1, 0],
       [0, 1, 1, 0, 1, 1, 0, 1, 1],
       [1, 0, 1, 1, 0, 1, 1, 0, 1],
       [0, 1, 1, 1, 0, 1, 1, 1, 1]]), 'BAdL': np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 1, 1, 1, 1, 1, 1, 1, 1],
       [0, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 0, 1, 1, 1, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 1, 1, 1, 0, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 0],
       [1, 1, 1, 1, 1, 1, 1, 1, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 'BBdL': np.array([[1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1]]), 'BVdL': np.array([[1, 1, 1, 1, 1, 1, 1, 1, 1],
       [0, 0, 0, 0, 1, 1, 0, 1, 1],
       [0, 0, 0, 0, 1, 1, 0, 1, 1],
       [1, 0, 1, 0, 0, 0, 1, 0, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 0, 1, 0, 0, 0, 1, 0, 1],
       [1, 1, 0, 1, 1, 0, 0, 0, 0],
       [1, 1, 0, 1, 1, 0, 0, 0, 0],
       [1, 1, 1, 1, 1, 1, 1, 1, 1]]), 'BDdL': np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 1, 1, 1, 1, 1, 0, 1, 1],
       [1, 1, 1, 0, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 0, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 0, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 0, 1, 1, 1],
       [1, 1, 0, 1, 1, 1, 1, 1, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 'VAdL': np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 1, 1, 1, 1, 1, 1, 1, 0],
       [1, 1, 1, 1, 0, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 0, 1, 1, 1, 1],
       [0, 1, 1, 1, 1, 1, 1, 1, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 'VBdL': np.array([[1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 0, 1, 0, 1],
       [1, 1, 1, 1, 1, 0, 1, 0, 1],
       [1, 1, 0, 1, 1, 1, 0, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 0, 1, 1, 1, 0, 1, 1],
       [1, 0, 1, 0, 1, 1, 1, 1, 1],
       [1, 0, 1, 0, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1]]), 'VVdL': np.array([[1, 1, 1, 1, 1, 0, 1, 0, 1],
       [0, 0, 0, 1, 1, 1, 1, 1, 1],
       [0, 0, 0, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 0, 0, 0, 1, 1, 1],
       [1, 1, 0, 1, 1, 1, 0, 1, 1],
       [1, 1, 1, 0, 0, 0, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 0, 0, 0],
       [1, 1, 1, 1, 1, 1, 0, 0, 0],
       [1, 0, 1, 0, 1, 1, 1, 1, 1]]), 'VDdL': np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 1, 0, 1, 1, 1, 1, 1, 1],
       [1, 0, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 0, 1, 1, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 1, 1, 0, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 0, 1],
       [1, 1, 1, 1, 1, 1, 0, 1, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 'DAdL': np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 1, 1, 1, 1, 1, 1, 0, 1],
       [1, 1, 1, 1, 1, 0, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 0, 1, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 1, 0, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 0, 1, 1, 1, 1, 1],
       [1, 0, 1, 1, 1, 1, 1, 1, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 'DBdL': np.array([[1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 0, 1, 1, 1, 0],
       [1, 1, 1, 1, 0, 1, 1, 1, 0],
       [0, 1, 1, 1, 1, 1, 1, 1, 0],
       [1, 1, 1, 1, 1, 1, 1, 1, 1],
       [0, 1, 1, 1, 1, 1, 1, 1, 0],
       [0, 1, 1, 1, 0, 1, 1, 1, 1],
       [0, 1, 1, 1, 0, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1]]), 'DVdL': np.array([[1, 1, 1, 1, 0, 1, 1, 1, 0],
       [0, 0, 0, 1, 1, 1, 1, 1, 1],
       [0, 0, 0, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 0, 0, 0, 1, 1, 1],
       [0, 1, 1, 1, 1, 1, 1, 1, 0],
       [1, 1, 1, 0, 0, 0, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 0, 0, 0],
       [1, 1, 1, 1, 1, 1, 0, 0, 0],
       [0, 1, 1, 1, 0, 1, 1, 1, 1]]), 'DDdL': np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 0, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 0, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 0, 1, 1, 1, 1, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 1, 1, 1, 1, 0, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 0, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 0, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 'AIBdL': np.array([[1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 0, 1, 1, 0, 1, 0, 0, 0],
       [1, 1, 0, 0, 0, 0, 1, 1, 0],
       [0, 1, 1, 0, 1, 1, 0, 0, 0],
       [1, 1, 1, 1, 1, 1, 1, 1, 1],
       [0, 0, 0, 1, 1, 0, 1, 1, 0],
       [0, 1, 1, 0, 0, 0, 0, 1, 1],
       [0, 0, 0, 1, 0, 1, 1, 0, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1]]), 'AIVdL': np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 0, 1, 1, 0, 1],
       [0, 0, 0, 1, 1, 0, 1, 1, 0],
       [0, 1, 1, 0, 0, 0, 0, 1, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 1, 0, 0, 0, 0, 1, 1, 0],
       [0, 1, 1, 0, 1, 1, 0, 0, 0],
       [1, 0, 1, 1, 0, 1, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 'BIAdL': np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 1, 1, 1, 1, 1, 0, 1, 1],
       [1, 1, 1, 0, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 0, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 0, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 0, 1, 1, 1],
       [1, 1, 0, 1, 1, 1, 1, 1, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 'VIAdL': np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
       [0, 0, 0, 1, 0, 1, 1, 0, 1],
       [0, 0, 0, 1, 1, 0, 1, 1, 0],
       [0, 1, 1, 0, 0, 0, 0, 1, 1],
       [0, 0, 0, 0, 0, 0, 0, 0, 0],
       [1, 1, 0, 0, 0, 0, 1, 1, 0],
       [0, 1, 1, 0, 1, 1, 0, 0, 0],
       [1, 0, 1, 1, 0, 1, 0, 0, 0],
       [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 'HdL': np.array([[1, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 0],
       [1, 1, 1, 1, 0, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 0],
       [1, 1, 1, 1, 1, 1, 1, 1, 1],
       [0, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 0, 1, 1, 1, 1],
       [0, 1, 1, 1, 1, 1, 1, 1, 1],
       [1, 1, 1, 1, 1, 1, 1, 1, 1]])}

    correctness = 0
    for key1, val1 in tile_prop_dict.items():
        for key2, val2 in test_tile_prop_dict.items():
            if key1 == key2:
                if np.array_equal(val1, val2):
                    correctness += 1

    assert num_tiles == correctness

    props_tuple = set(tuple(array.flatten()) for array in prop_matrices)
    check_unique_props = 38
    print("Number of unique original props = ", len(props_tuple))
    assert len(props_tuple) == check_unique_props

    props_arrays = [np.array(matrix).reshape(9,9) for matrix in props_tuple] # All unique prop matrices relating to tiles

    result, records = validation.get_closure(props_arrays)
    check_num_props = 161
    # check_num_records = 186

    props_tuple = set(tuple(array.flatten()) for array in result)
    print("Number of unique original props from closure = ", len(props_tuple))
    assert len(result) == check_num_props
    print("Number of triples in records = ", len(records))
    # assert len(records) == check_num_records

    result_non_col = validation.check_diagonal(result)
    check_non_col = 27
    print("Number of prop matrices from closure not 3-col = ", len(result_non_col))
    assert len(result_non_col) == check_non_col

    # Calculating number of tiles that are not 3-colourable
    tiles_non_col = 0
    non_col_tiles = []
    for matrix in result_non_col:
        if validation.already_exists(matrix, props_arrays):
            tiles_non_col += 1

            non_col_tiles.append(matrix)
    check_tiles_ncol = 8
    print("Number of tiles that are not 3-col = ", tiles_non_col)
    non_col_tiles_names = []
    for matrix in non_col_tiles:
       for i in range(0, len(prop_matrices)):
          if np.array_equal(matrix, prop_matrices[i]):
             non_col_tiles_names.append(tile_types[i])
    print("The non-3-col tiles are: ", non_col_tiles_names)
    assert tiles_non_col == check_tiles_ncol

    # Checking which prop matrices will eventually lead to a 4-chrom prop matrix
    special_matrices, triples = validation.leads_to_zero_diag(records)
    print("Number of matrices that lead to non 3-col matrix = ", len(special_matrices))
    print("Number of triples of the form (A,B,C) s.t. A*B = C and C is 4-chromatic = ", len(triples))

    # test_list = []
    # for triple in triples:
    #     if validation.already_exists(triple[1], props_arrays):
    #         test_list.append(triple)
    # print("Number of triples in our test_list = ", len(test_list))


    # store all the non 3-colourable ones first, should be from 0 - 26
    # for matrix in result_non_col:
    #     rels.update({idx: matrix})
    #     idx += 1

    # store all tiles
    # for tile in props_arrays:
    #     if not validation.already_exists(tile, result_non_col):
    #         rels.update({idx: tile})
    #     idx += 1

    # special_matrices = []
    # num_special = 0
    # for triple in records:
    #     # For every (A,B,C), check if C is 4-chromatic
    #     if validation.already_exists(triple[2], result_non_col):
    #         # If so, store A,B, and C as matrices that lead to a 4-chrom sequence.
    #         # Check that neither A, B nor C are not already stored in special_matrices.
    #         if not validation.already_exists(triple[0], special_matrices):
    #             special_matrices.append(triple[0])
    #         if not validation.already_exists(triple[1], special_matrices):
    #             special_matrices.append(triple[1])
    #         if not validation.already_exists(triple[2], special_matrices):
    #             special_matrices.append(triple[2])
    #         num_special += 1

    # print("Number of triples that have C as 4-chrom prop matrix: ", num_special)

    ####################################################################################################################
    # Finding the transitions of the automata that accepts 4-chromatic sequences of tiles.                             #
    ####################################################################################################################

    aut_transitions = []
    tiles_dict = dict()
    four_chrom_props = []
    rels = dict()  # Relate integer to prop matrix
    idx = 0
    naughty_matrix = np.zeros((9,9))

    for triple in records:
        # For a triple (A,B,C), check that A,B,C are in special_matrices
        # if np.array_equal(triple[0], vvl_prop_matrix) and np.array_equal(triple[1], aibl_prop_matrix):
        #     naughty_matrix = triple[2]

        if validation.already_exists(triple[0], special_matrices) and validation.already_exists(triple[2], special_matrices) and validation.already_exists(triple[1], special_matrices):
            if validation.already_exists(triple[1], prop_matrices): # Check that B is a tile, since tiles form the alphabet
                vals_list = list(rels.values())
                if validation.already_exists(triple[0], vals_list):
                    idx1 = get_key(rels, triple[0])
                else:
                    idx1 = idx
                    idx += 1
                    rels.update({idx1: triple[0]})
                if validation.already_exists(triple[1], vals_list):
                    idx2 = get_key(rels, triple[1])
                else:
                    idx2 = idx
                    idx += 1
                    rels.update({idx2: triple[1]})
                    tiles_dict.update({idx2: triple[1]})
                if validation.already_exists(triple[2], vals_list):
                    end_array_idx = get_key(rels, triple[2])
                else:
                    end_array_idx = idx
                    idx += 1
                    rels.update({end_array_idx: triple[2]})
                aut_transitions.append((idx1, idx2, end_array_idx))
                # aut_trans_temp.append(triple)

    # print(aut_transitions)
    # # Transforming the edges in aut_trans_temp
    # aut_transitions = []
    # for edge in aut_trans_temp:
    #     if validation.already_exists(edge[0], rels.values()) and validation.already_exists(edge[1], rels.values()) and validation.already_exists(edge[2], rels.values()):
    #         start_prop = get_key(rels, edge[0])
    #         tile_prop = get_key(rels, edge[1])
    #         end_prop = get_key(rels, edge[2])
    #         aut_transitions.append((start_prop, tile_prop, end_prop))
    #     else:
    #         print("OQO!!!!")
    #         break

    print("Number of transitions = ", len(aut_transitions))
    print("Number of elements in rels dict = ", len(rels.keys()))

    # What we hope to achieve as prop matrices
    test_dict = {0: np.array([[0, 0, 0, 0, 1, 1, 0, 1, 1],
                              [0, 0, 1, 0, 1, 1, 0, 1, 1],
                              [0, 1, 0, 0, 1, 1, 0, 1, 1],
                              [1, 0, 1, 0, 0, 1, 1, 0, 1],
                              [1, 0, 1, 0, 0, 0, 1, 0, 1],
                              [1, 0, 1, 1, 0, 0, 1, 0, 1],
                              [1, 1, 0, 1, 1, 0, 0, 1, 0],
                              [1, 1, 0, 1, 1, 0, 1, 0, 0],
                              [1, 1, 0, 1, 1, 0, 0, 0, 0]]), 1: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                          [1, 0, 0, 1, 1, 1, 1, 1, 1],
                                                                          [1, 0, 0, 1, 1, 1, 1, 1, 1],
                                                                          [1, 1, 1, 0, 1, 0, 1, 1, 1],
                                                                          [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                          [1, 1, 1, 0, 1, 0, 1, 1, 1],
                                                                          [1, 1, 1, 1, 1, 1, 0, 0, 1],
                                                                          [1, 1, 1, 1, 1, 1, 0, 0, 1],
                                                                          [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                 2: np.array([[0, 1, 1, 0, 0, 1, 0, 1, 0],
                              [0, 0, 0, 0, 1, 1, 0, 1, 1],
                              [0, 0, 0, 0, 1, 1, 0, 1, 1],
                              [1, 0, 1, 0, 0, 0, 1, 0, 1],
                              [0, 0, 1, 1, 0, 1, 1, 0, 0],
                              [1, 0, 1, 0, 0, 0, 1, 0, 1],
                              [1, 1, 0, 1, 1, 0, 0, 0, 0],
                              [1, 1, 0, 1, 1, 0, 0, 0, 0],
                              [0, 1, 0, 1, 0, 0, 1, 1, 0]]), 3: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                          [0, 0, 1, 0, 1, 1, 0, 1, 1],
                                                                          [0, 1, 0, 0, 1, 1, 0, 1, 1],
                                                                          [1, 0, 1, 0, 0, 1, 1, 0, 1],
                                                                          [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                          [1, 0, 1, 1, 0, 0, 1, 0, 1],
                                                                          [1, 1, 0, 1, 1, 0, 0, 1, 0],
                                                                          [1, 1, 0, 1, 1, 0, 1, 0, 0],
                                                                          [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                 4: np.array([[0, 1, 1, 0, 1, 0, 0, 0, 1],
                              [0, 0, 0, 0, 1, 1, 0, 1, 1],
                              [0, 0, 0, 0, 1, 1, 0, 1, 1],
                              [1, 0, 1, 0, 0, 0, 1, 0, 1],
                              [1, 0, 0, 1, 0, 1, 0, 0, 1],
                              [1, 0, 1, 0, 0, 0, 1, 0, 1],
                              [1, 1, 0, 1, 1, 0, 0, 0, 0],
                              [1, 1, 0, 1, 1, 0, 0, 0, 0],
                              [1, 0, 0, 0, 1, 0, 1, 1, 0]]), 5: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                          [0, 0, 0, 0, 1, 0, 0, 1, 0],
                                                                          [0, 0, 0, 0, 0, 1, 0, 0, 1],
                                                                          [1, 0, 0, 0, 0, 0, 1, 0, 0],
                                                                          [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                          [0, 0, 1, 0, 0, 0, 0, 0, 1],
                                                                          [1, 0, 0, 1, 0, 0, 0, 0, 0],
                                                                          [0, 1, 0, 0, 1, 0, 0, 0, 0],
                                                                          [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                 6: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                              [1, 0, 1, 1, 1, 1, 1, 1, 1],
                              [1, 1, 0, 1, 1, 1, 1, 1, 1],
                              [1, 1, 1, 0, 1, 1, 1, 1, 1],
                              [0, 0, 0, 0, 0, 0, 0, 0, 0],
                              [1, 1, 1, 1, 1, 0, 1, 1, 1],
                              [1, 1, 1, 1, 1, 1, 0, 1, 1],
                              [1, 1, 1, 1, 1, 1, 1, 0, 1],
                              [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 7: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                          [0, 0, 0, 1, 0, 1, 1, 0, 1],
                                                                          [0, 0, 0, 1, 1, 0, 1, 1, 0],
                                                                          [0, 1, 1, 0, 0, 0, 0, 1, 1],
                                                                          [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                          [1, 1, 0, 0, 0, 0, 1, 1, 0],
                                                                          [0, 1, 1, 0, 1, 1, 0, 0, 0],
                                                                          [1, 0, 1, 1, 0, 1, 0, 0, 0],
                                                                          [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                 8: np.array([[0, 1, 1, 0, 1, 1, 0, 1, 1],
                              [1, 0, 1, 1, 1, 1, 1, 1, 1],
                              [1, 1, 0, 1, 1, 1, 1, 1, 1],
                              [1, 1, 1, 0, 1, 1, 1, 1, 1],
                              [1, 0, 1, 1, 0, 1, 1, 0, 1],
                              [1, 1, 1, 1, 1, 0, 1, 1, 1],
                              [1, 1, 1, 1, 1, 1, 0, 1, 1],
                              [1, 1, 1, 1, 1, 1, 1, 0, 1],
                              [1, 1, 0, 1, 1, 0, 1, 1, 0]]), 9: np.array([[0, 0, 0, 0, 1, 1, 0, 1, 1],
                                                                          [0, 0, 1, 0, 1, 0, 0, 1, 1],
                                                                          [0, 1, 0, 0, 1, 1, 0, 0, 1],
                                                                          [1, 0, 0, 0, 0, 1, 1, 0, 1],
                                                                          [1, 0, 1, 0, 0, 0, 1, 0, 1],
                                                                          [1, 0, 1, 1, 0, 0, 0, 0, 1],
                                                                          [1, 0, 0, 1, 1, 0, 0, 1, 0],
                                                                          [1, 1, 0, 0, 1, 0, 1, 0, 0],
                                                                          [1, 1, 0, 1, 1, 0, 0, 0, 0]]),
                 10: np.array([[0, 0, 0, 1, 1, 1, 1, 1, 1],
                               [1, 0, 1, 1, 0, 1, 1, 0, 1],
                               [1, 1, 0, 1, 1, 0, 1, 1, 0],
                               [0, 1, 1, 0, 1, 1, 0, 1, 1],
                               [1, 1, 1, 0, 0, 0, 1, 1, 1],
                               [1, 1, 0, 1, 1, 0, 1, 1, 0],
                               [0, 1, 1, 0, 1, 1, 0, 1, 1],
                               [1, 0, 1, 1, 0, 1, 1, 0, 1],
                               [1, 1, 1, 1, 1, 1, 0, 0, 0]]), 11: np.array([[0, 1, 1, 0, 1, 1, 0, 1, 1],
                                                                            [0, 0, 0, 0, 1, 1, 0, 1, 1],
                                                                            [0, 0, 0, 0, 1, 1, 0, 1, 1],
                                                                            [1, 0, 1, 0, 0, 0, 1, 0, 1],
                                                                            [1, 0, 1, 1, 0, 1, 1, 0, 1],
                                                                            [1, 0, 1, 0, 0, 0, 1, 0, 1],
                                                                            [1, 1, 0, 1, 1, 0, 0, 0, 0],
                                                                            [1, 1, 0, 1, 1, 0, 0, 0, 0],
                                                                            [1, 1, 0, 1, 1, 0, 1, 1, 0]]),
                 12: np.array([[0, 1, 1, 0, 1, 1, 0, 1, 1],
                               [1, 0, 0, 1, 1, 1, 1, 1, 1],
                               [1, 0, 0, 1, 1, 1, 1, 1, 1],
                               [1, 1, 1, 0, 1, 0, 1, 1, 1],
                               [1, 0, 1, 1, 0, 1, 1, 0, 1],
                               [1, 1, 1, 0, 1, 0, 1, 1, 1],
                               [1, 1, 1, 1, 1, 1, 0, 0, 1],
                               [1, 1, 1, 1, 1, 1, 0, 0, 1],
                               [1, 1, 0, 1, 1, 0, 1, 1, 0]]), 13: np.array([[0, 1, 1, 0, 1, 1, 0, 1, 1],
                                                                            [0, 0, 0, 0, 1, 0, 0, 1, 0],
                                                                            [0, 0, 0, 0, 0, 1, 0, 0, 1],
                                                                            [1, 0, 0, 0, 0, 0, 1, 0, 0],
                                                                            [1, 0, 1, 1, 0, 1, 1, 0, 1],
                                                                            [0, 0, 1, 0, 0, 0, 0, 0, 1],
                                                                            [1, 0, 0, 1, 0, 0, 0, 0, 0],
                                                                            [0, 1, 0, 0, 1, 0, 0, 0, 0],
                                                                            [1, 1, 0, 1, 1, 0, 1, 1, 0]]),
                 14: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 0, 0, 1, 1, 1, 0, 1, 1],
                               [1, 0, 0, 0, 1, 1, 1, 1, 1],
                               [1, 1, 1, 0, 1, 0, 1, 0, 1],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 0, 1, 0, 1, 0, 1, 1, 1],
                               [1, 1, 1, 1, 1, 0, 0, 0, 1],
                               [1, 1, 0, 1, 1, 1, 0, 0, 1],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 15: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [0, 0, 1, 1, 1, 1, 1, 1, 1],
                                                                            [0, 1, 0, 1, 1, 1, 1, 1, 1],
                                                                            [1, 1, 1, 0, 0, 1, 1, 1, 1],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [1, 1, 1, 1, 0, 0, 1, 1, 1],
                                                                            [1, 1, 1, 1, 1, 1, 0, 1, 0],
                                                                            [1, 1, 1, 1, 1, 1, 1, 0, 0],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                 16: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 0, 0, 1, 1, 0, 1, 1, 0],
                               [1, 0, 0, 1, 0, 1, 1, 0, 1],
                               [1, 1, 0, 0, 1, 0, 1, 1, 0],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 1, 1, 0, 1, 0, 0, 1, 1],
                               [1, 0, 1, 1, 0, 1, 0, 0, 1],
                               [0, 1, 1, 0, 1, 1, 0, 0, 1],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 17: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [0, 0, 1, 1, 1, 1, 1, 1, 0],
                                                                            [0, 1, 0, 1, 0, 1, 1, 1, 1],
                                                                            [1, 1, 1, 0, 0, 1, 1, 1, 0],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [0, 1, 1, 1, 0, 0, 1, 1, 1],
                                                                            [1, 1, 1, 1, 0, 1, 0, 1, 0],
                                                                            [0, 1, 1, 1, 1, 1, 1, 0, 0],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                 18: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 0, 1, 1, 0, 1, 0, 0, 0],
                               [1, 1, 0, 0, 0, 0, 1, 1, 0],
                               [0, 1, 1, 0, 1, 1, 0, 0, 0],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 0, 0, 1, 1, 0, 1, 1, 0],
                               [0, 1, 1, 0, 0, 0, 0, 1, 1],
                               [0, 0, 0, 1, 0, 1, 1, 0, 1],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 19: np.array([[0, 1, 1, 0, 1, 1, 0, 1, 1],
                                                                            [0, 0, 1, 0, 1, 1, 0, 1, 1],
                                                                            [0, 1, 0, 0, 1, 1, 0, 1, 1],
                                                                            [1, 0, 1, 0, 0, 1, 1, 0, 1],
                                                                            [1, 0, 1, 1, 0, 1, 1, 0, 1],
                                                                            [1, 0, 1, 1, 0, 0, 1, 0, 1],
                                                                            [1, 1, 0, 1, 1, 0, 0, 1, 0],
                                                                            [1, 1, 0, 1, 1, 0, 1, 0, 0],
                                                                            [1, 1, 0, 1, 1, 0, 1, 1, 0]]),
                 20: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 0, 1, 1, 0, 0, 1, 0, 1],
                               [1, 1, 0, 1, 1, 0, 1, 0, 0],
                               [0, 1, 0, 0, 1, 1, 0, 1, 1],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 1, 0, 1, 1, 0, 0, 1, 0],
                               [0, 0, 1, 0, 1, 1, 0, 1, 1],
                               [1, 0, 1, 0, 0, 1, 1, 0, 1],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 21: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [1, 0, 1, 0, 1, 1, 1, 1, 1],
                                                                            [1, 1, 0, 1, 1, 1, 0, 1, 1],
                                                                            [1, 0, 1, 0, 1, 1, 1, 1, 1],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [1, 1, 1, 1, 1, 0, 1, 0, 1],
                                                                            [1, 1, 0, 1, 1, 1, 0, 1, 1],
                                                                            [1, 1, 1, 1, 1, 0, 1, 0, 1],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                 22: np.array([[0, 1, 1, 1, 1, 1, 1, 1, 1],
                               [0, 0, 1, 1, 1, 1, 1, 1, 0],
                               [0, 1, 0, 1, 0, 1, 1, 1, 1],
                               [1, 1, 1, 0, 0, 1, 1, 1, 0],
                               [1, 1, 1, 1, 0, 1, 1, 1, 1],
                               [0, 1, 1, 1, 0, 0, 1, 1, 1],
                               [1, 1, 1, 1, 0, 1, 0, 1, 0],
                               [0, 1, 1, 1, 1, 1, 1, 0, 0],
                               [1, 1, 1, 1, 1, 1, 1, 1, 0]]), 23: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [1, 0, 1, 0, 1, 0, 1, 1, 1],
                                                                            [1, 1, 0, 1, 1, 1, 0, 0, 1],
                                                                            [1, 0, 0, 0, 1, 1, 1, 1, 1],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [1, 1, 1, 1, 1, 0, 0, 0, 1],
                                                                            [1, 0, 0, 1, 1, 1, 0, 1, 1],
                                                                            [1, 1, 1, 0, 1, 0, 1, 0, 1],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                 24: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 0, 1, 0, 0, 1, 1, 0, 1],
                               [1, 1, 0, 1, 1, 0, 0, 1, 0],
                               [0, 0, 1, 0, 1, 1, 0, 1, 1],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 1, 0, 1, 1, 0, 1, 0, 0],
                               [0, 1, 0, 0, 1, 1, 0, 1, 1],
                               [1, 0, 1, 1, 0, 0, 1, 0, 1],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 25: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [1, 0, 0, 1, 0, 1, 1, 0, 1],
                                                                            [1, 0, 0, 1, 1, 0, 1, 1, 0],
                                                                            [0, 1, 1, 0, 1, 0, 0, 1, 1],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [1, 1, 0, 0, 1, 0, 1, 1, 0],
                                                                            [0, 1, 1, 0, 1, 1, 0, 0, 1],
                                                                            [1, 0, 1, 1, 0, 1, 0, 0, 1],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                 26: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 0, 1, 1, 0, 1, 0, 0, 1],
                               [1, 1, 0, 0, 1, 0, 1, 1, 0],
                               [0, 1, 1, 0, 1, 1, 0, 0, 1],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 0, 0, 1, 1, 0, 1, 1, 0],
                               [0, 1, 1, 0, 1, 0, 0, 1, 1],
                               [1, 0, 0, 1, 0, 1, 1, 0, 1],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 27: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [0, 1, 0, 0, 1, 0, 0, 0, 0],
                                                                            [0, 0, 1, 0, 0, 0, 0, 0, 1],
                                                                            [1, 0, 0, 1, 0, 0, 0, 0, 0],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [0, 0, 0, 0, 0, 1, 0, 0, 1],
                                                                            [1, 0, 0, 0, 0, 0, 1, 0, 0],
                                                                            [0, 0, 0, 0, 1, 0, 0, 1, 0],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                 28: np.array([[0, 1, 1, 0, 1, 0, 0, 0, 1],
                               [0, 1, 0, 0, 1, 1, 0, 0, 1],
                               [0, 0, 1, 0, 1, 0, 0, 1, 1],
                               [1, 0, 1, 1, 0, 0, 0, 0, 1],
                               [1, 0, 0, 1, 0, 1, 0, 0, 1],
                               [1, 0, 0, 0, 0, 1, 1, 0, 1],
                               [1, 1, 0, 0, 1, 0, 1, 0, 0],
                               [1, 0, 0, 1, 1, 0, 0, 1, 0],
                               [1, 0, 0, 0, 1, 0, 1, 1, 0]]), 29: np.array([[0, 1, 1, 0, 1, 0, 0, 0, 1],
                                                                            [0, 1, 0, 0, 1, 0, 0, 1, 0],
                                                                            [0, 0, 1, 0, 0, 1, 0, 0, 1],
                                                                            [1, 0, 0, 1, 0, 0, 1, 0, 0],
                                                                            [1, 0, 0, 1, 0, 1, 0, 0, 1],
                                                                            [0, 0, 1, 0, 0, 1, 0, 0, 1],
                                                                            [1, 0, 0, 1, 0, 0, 1, 0, 0],
                                                                            [0, 1, 0, 0, 1, 0, 0, 1, 0],
                                                                            [1, 0, 0, 0, 1, 0, 1, 1, 0]]),
                 30: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 1, 1, 1, 1, 1, 1, 0, 0],
                               [1, 1, 1, 1, 0, 0, 1, 1, 1],
                               [1, 1, 1, 1, 1, 1, 0, 1, 0],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 1, 0, 1, 1, 1, 1, 1, 1],
                               [1, 1, 1, 0, 0, 1, 1, 1, 1],
                               [0, 0, 1, 1, 1, 1, 1, 1, 1],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 31: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [0, 1, 1, 0, 1, 1, 0, 0, 1],
                                                                            [0, 1, 1, 0, 1, 0, 0, 1, 1],
                                                                            [1, 0, 1, 1, 0, 1, 0, 0, 1],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [1, 0, 0, 1, 0, 1, 1, 0, 1],
                                                                            [1, 1, 0, 0, 1, 0, 1, 1, 0],
                                                                            [1, 0, 0, 1, 1, 0, 1, 1, 0],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                 32: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 1, 0, 1, 1, 1, 0, 0, 1],
                               [1, 0, 1, 0, 1, 0, 1, 1, 1],
                               [1, 1, 1, 1, 1, 0, 0, 0, 1],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 0, 0, 0, 1, 1, 1, 1, 1],
                               [1, 1, 1, 0, 1, 0, 1, 0, 1],
                               [1, 0, 0, 1, 1, 1, 0, 1, 1],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 33: np.array([[0, 1, 1, 0, 1, 1, 0, 1, 1],
                                                                            [0, 1, 1, 0, 1, 0, 0, 0, 1],
                                                                            [0, 1, 1, 0, 1, 0, 0, 0, 1],
                                                                            [1, 0, 0, 1, 0, 1, 0, 0, 1],
                                                                            [1, 0, 1, 1, 0, 1, 1, 0, 1],
                                                                            [1, 0, 0, 1, 0, 1, 0, 0, 1],
                                                                            [1, 0, 0, 0, 1, 0, 1, 1, 0],
                                                                            [1, 0, 0, 0, 1, 0, 1, 1, 0],
                                                                            [1, 1, 0, 1, 1, 0, 1, 1, 0]]),
                 34: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 1, 0, 0, 1, 1, 0, 1, 1],
                               [0, 0, 1, 0, 1, 1, 0, 1, 1],
                               [1, 0, 1, 1, 0, 0, 1, 0, 1],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 0, 1, 0, 0, 1, 1, 0, 1],
                               [1, 1, 0, 1, 1, 0, 1, 0, 0],
                               [1, 1, 0, 1, 1, 0, 0, 1, 0],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 35: np.array([[0, 1, 1, 0, 1, 1, 0, 1, 1],
                                                                            [0, 1, 0, 0, 1, 0, 0, 0, 0],
                                                                            [0, 0, 1, 0, 0, 0, 0, 0, 1],
                                                                            [1, 0, 0, 1, 0, 0, 0, 0, 0],
                                                                            [1, 0, 1, 1, 0, 1, 1, 0, 1],
                                                                            [0, 0, 0, 0, 0, 1, 0, 0, 1],
                                                                            [1, 0, 0, 0, 0, 0, 1, 0, 0],
                                                                            [0, 0, 0, 0, 1, 0, 0, 1, 0],
                                                                            [1, 1, 0, 1, 1, 0, 1, 1, 0]]),
                 36: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 1, 1, 1, 1, 1, 1, 0, 0],
                               [0, 1, 1, 1, 0, 0, 1, 1, 1],
                               [1, 1, 1, 1, 0, 1, 0, 1, 0],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 1, 0, 1, 0, 1, 1, 1, 1],
                               [1, 1, 1, 0, 0, 1, 1, 1, 0],
                               [0, 0, 1, 1, 1, 1, 1, 1, 0],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 37: np.array([[0, 1, 1, 0, 1, 1, 0, 1, 1],
                                                                            [0, 1, 1, 0, 1, 1, 0, 0, 1],
                                                                            [0, 1, 1, 0, 1, 0, 0, 1, 1],
                                                                            [1, 0, 1, 1, 0, 1, 0, 0, 1],
                                                                            [1, 0, 1, 1, 0, 1, 1, 0, 1],
                                                                            [1, 0, 0, 1, 0, 1, 1, 0, 1],
                                                                            [1, 1, 0, 0, 1, 0, 1, 1, 0],
                                                                            [1, 0, 0, 1, 1, 0, 1, 1, 0],
                                                                            [1, 1, 0, 1, 1, 0, 1, 1, 0]]),
                 38: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 1, 1, 1, 1, 1, 1, 0, 1],
                               [1, 1, 1, 1, 1, 0, 1, 1, 1],
                               [1, 1, 1, 1, 1, 1, 0, 1, 1],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 1, 0, 1, 1, 1, 1, 1, 1],
                               [1, 1, 1, 0, 1, 1, 1, 1, 1],
                               [1, 0, 1, 1, 1, 1, 1, 1, 1],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 39: np.array([[0, 1, 1, 0, 1, 0, 0, 0, 1],
                                                                            [0, 1, 1, 0, 1, 1, 0, 0, 1],
                                                                            [0, 1, 1, 0, 1, 0, 0, 1, 1],
                                                                            [1, 0, 1, 1, 0, 1, 0, 0, 1],
                                                                            [1, 0, 0, 1, 0, 1, 0, 0, 1],
                                                                            [1, 0, 0, 1, 0, 1, 1, 0, 1],
                                                                            [1, 1, 0, 0, 1, 0, 1, 1, 0],
                                                                            [1, 0, 0, 1, 1, 0, 1, 1, 0],
                                                                            [1, 0, 0, 0, 1, 0, 1, 1, 0]]),
                 40: np.array([[0, 1, 1, 0, 1, 1, 0, 1, 1],
                               [1, 1, 1, 1, 1, 1, 1, 0, 1],
                               [1, 1, 1, 1, 1, 0, 1, 1, 1],
                               [1, 1, 1, 1, 1, 1, 0, 1, 1],
                               [1, 0, 1, 1, 0, 1, 1, 0, 1],
                               [1, 1, 0, 1, 1, 1, 1, 1, 1],
                               [1, 1, 1, 0, 1, 1, 1, 1, 1],
                               [1, 0, 1, 1, 1, 1, 1, 1, 1],
                               [1, 1, 0, 1, 1, 0, 1, 1, 0]]), 41: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [1, 1, 1, 1, 1, 0, 1, 0, 1],
                                                                            [1, 1, 1, 1, 1, 0, 1, 0, 1],
                                                                            [1, 1, 0, 1, 1, 1, 0, 1, 1],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [1, 1, 0, 1, 1, 1, 0, 1, 1],
                                                                            [1, 0, 1, 0, 1, 1, 1, 1, 1],
                                                                            [1, 0, 1, 0, 1, 1, 1, 1, 1],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                 42: np.array([[0, 1, 1, 0, 1, 1, 0, 1, 1],
                               [1, 1, 1, 1, 1, 0, 1, 0, 1],
                               [1, 1, 1, 1, 1, 0, 1, 0, 1],
                               [1, 1, 0, 1, 1, 1, 0, 1, 1],
                               [1, 0, 1, 1, 0, 1, 1, 0, 1],
                               [1, 1, 0, 1, 1, 1, 0, 1, 1],
                               [1, 0, 1, 0, 1, 1, 1, 1, 1],
                               [1, 0, 1, 0, 1, 1, 1, 1, 1],
                               [1, 1, 0, 1, 1, 0, 1, 1, 0]]), 43: np.array([[0, 0, 0, 0, 1, 1, 0, 1, 1],
                                                                            [0, 1, 1, 0, 1, 0, 0, 0, 1],
                                                                            [0, 1, 1, 0, 1, 0, 0, 0, 1],
                                                                            [1, 0, 0, 1, 0, 1, 0, 0, 1],
                                                                            [1, 0, 1, 0, 0, 0, 1, 0, 1],
                                                                            [1, 0, 0, 1, 0, 1, 0, 0, 1],
                                                                            [1, 0, 0, 0, 1, 0, 1, 1, 0],
                                                                            [1, 0, 0, 0, 1, 0, 1, 1, 0],
                                                                            [1, 1, 0, 1, 1, 0, 0, 0, 0]]),
                 44: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 1, 1, 1, 1, 1, 0, 0, 1],
                               [1, 1, 1, 0, 1, 0, 1, 1, 1],
                               [1, 1, 1, 1, 1, 1, 0, 0, 1],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 0, 0, 1, 1, 1, 1, 1, 1],
                               [1, 1, 1, 0, 1, 0, 1, 1, 1],
                               [1, 0, 0, 1, 1, 1, 1, 1, 1],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 45: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [1, 1, 0, 1, 1, 0, 1, 0, 0],
                                                                            [1, 0, 1, 1, 0, 0, 1, 0, 1],
                                                                            [1, 1, 0, 1, 1, 0, 0, 1, 0],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [0, 1, 0, 0, 1, 1, 0, 1, 1],
                                                                            [1, 0, 1, 0, 0, 1, 1, 0, 1],
                                                                            [0, 0, 1, 0, 1, 1, 0, 1, 1],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                 46: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 1, 1, 0, 1, 0, 1, 0, 1],
                               [1, 1, 1, 1, 1, 0, 0, 0, 1],
                               [1, 0, 0, 1, 1, 1, 0, 1, 1],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 1, 0, 1, 1, 1, 0, 0, 1],
                               [1, 0, 0, 0, 1, 1, 1, 1, 1],
                               [1, 0, 1, 0, 1, 0, 1, 1, 1],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0]]), 47: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [0, 1, 1, 0, 1, 0, 0, 1, 1],
                                                                            [0, 1, 1, 0, 1, 1, 0, 0, 1],
                                                                            [1, 0, 0, 1, 0, 1, 1, 0, 1],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [1, 0, 1, 1, 0, 1, 0, 0, 1],
                                                                            [1, 0, 0, 1, 1, 0, 1, 1, 0],
                                                                            [1, 1, 0, 0, 1, 0, 1, 1, 0],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                 48: np.array([[0, 0, 0, 0, 1, 1, 0, 1, 1],
                               [0, 1, 0, 0, 1, 0, 0, 1, 0],
                               [0, 0, 1, 0, 0, 1, 0, 0, 1],
                               [1, 0, 0, 1, 0, 0, 1, 0, 0],
                               [1, 0, 1, 0, 0, 0, 1, 0, 1],
                               [0, 0, 1, 0, 0, 1, 0, 0, 1],
                               [1, 0, 0, 1, 0, 0, 1, 0, 0],
                               [0, 1, 0, 0, 1, 0, 0, 1, 0],
                               [1, 1, 0, 1, 1, 0, 0, 0, 0]]), 49: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [1, 1, 0, 1, 1, 0, 0, 1, 0],
                                                                            [1, 0, 1, 0, 0, 1, 1, 0, 1],
                                                                            [1, 1, 0, 1, 1, 0, 1, 0, 0],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0],
                                                                            [0, 0, 1, 0, 1, 1, 0, 1, 1],
                                                                            [1, 0, 1, 1, 0, 0, 1, 0, 1],
                                                                            [0, 1, 0, 0, 1, 1, 0, 1, 1],
                                                                            [0, 0, 0, 0, 0, 0, 0, 0, 0]]),
                 50: np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [1, 1, 0, 0, 1, 0, 1, 1, 0],
                               [1, 0, 1, 1, 0, 1, 0, 0, 1],
                               [1, 0, 0, 1, 1, 0, 1, 1, 0],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0],
                               [0, 1, 1, 0, 1, 1, 0, 0, 1],
                               [1, 0, 0, 1, 0, 1, 1, 0, 1],
                               [0, 1, 1, 0, 1, 0, 0, 1, 1],
                               [0, 0, 0, 0, 0, 0, 0, 0, 0]])}

    assert len(rels.keys()) == len(test_dict)

    map = dict() # relationship between my numbers and adriana's
    num_matches = 0
    for key, value in rels.items():
        for key2, value2 in test_dict.items():
            if np.array_equal(value, value2):
                num_matches += 1
                map.update({key: key2})
                continue
    print("number of matches = ", num_matches)
    assert len(rels) == len(test_dict)
    # print(map)

    # What we are hoping to achieve as automata transitions
    test = [(0, 5, 39), (1, 5, 41), (2, 5, 33), (3, 28, 6), (3, 5, 31), (4, 31, 12), (4, 3, 42), (4, 5, 43), (5, 0, 41),
            (5, 28, 14), (5, 1, 44), (5, 30, 15), (5, 31, 16), (5, 2, 30), (5, 3, 45), (5, 33, 6), (5, 4, 32),
            (5, 34, 49), (5, 35, 6), (5, 5, 27), (5, 36, 17), (5, 37, 6), (5, 38, 6), (5, 6, 38), (5, 7, 18),
            (6, 5, 38), (7, 29, 6), (7, 34, 38), (7, 5, 20), (8, 5, 40), (9, 5, 28), (11, 5, 33), (12, 5, 42),
            (13, 5, 35), (13, 36, 22), (14, 31, 6), (14, 3, 38), (14, 5, 46), (15, 5, 38), (16, 4, 38), (16, 5, 45),
            (17, 35, 6), (17, 5, 38), (18, 29, 38), (18, 34, 6), (18, 5, 24), (19, 5, 37), (20, 5, 25), (21, 5, 44),
            (23, 5, 32), (24, 5, 26), (25, 34, 38), (25, 5, 20), (26, 34, 6), (26, 5, 24), (27, 0, 21), (27, 28, 32),
            (27, 1, 1), (27, 30, 30), (27, 31, 31), (27, 2, 15), (27, 3, 3), (27, 33, 38), (27, 4, 14), (27, 34, 34),
            (27, 35, 38), (27, 5, 5), (27, 36, 36), (27, 37, 38), (27, 38, 38), (27, 6, 6), (27, 7, 7), (28, 31, 40),
            (28, 3, 8), (28, 5, 9), (29, 5, 48), (29, 7, 10), (30, 5, 6), (31, 4, 6), (31, 5, 3), (32, 31, 38),
            (32, 3, 6), (32, 5, 23), (33, 5, 11), (34, 5, 47), (35, 5, 13), (36, 35, 38), (36, 5, 6), (37, 5, 19),
            (38, 5, 6), (39, 5, 0), (40, 5, 8), (41, 5, 1), (42, 5, 12), (43, 5, 4), (44, 5, 21), (45, 28, 38),
            (45, 5, 16), (46, 5, 14), (47, 5, 34), (47, 7, 6), (48, 5, 29), (49, 5, 50), (50, 5, 49), (50, 7, 38)]

    print("Number of transitions in Adriana's automata = ", len(test))
    # print("The dictionary that contains all matrices used in the transitions: ")
    # print(rels)

    start_vertex = len(rels.keys()) + 1 # Represents identity matrix
    rels.update({start_vertex: np.identity(9)}) # Adding the identity matrix at the end of dict
    aut_alph = set(tiles_dict.keys()) # Tiles as numbers from the dictionary

    four_chrom_num = []
    for array in result_non_col:
        for key, value in rels.items():
         if np.array_equal(value, array):
            four_chrom_num.append(key)
            continue

    # final_states = four_chrom_num
    print("Number of final states = ", len(four_chrom_num))

    start_transitions = []
    for tile in tiles_dict.keys():
        start_transitions.append((start_vertex, tile, tile))
       # aut_transitions.append((start_vertex, tile, tile))
    print(start_transitions)
    aut_transitions += start_transitions

    automata = dfa.DFA(
               start = start_vertex,
               inputs = aut_alph,
               label = lambda s: is_final_state(s, four_chrom_num),
               transition = lambda s, c: get_transition(s, c, aut_transitions),
    )

    # automata_min = automata.minimize()
    print(dfa.dfa2dict(automata))


    print("Which numbers represent tiles?")
    # print(tiles_dict.keys())
    # tile - tile name map
    tile_map = dict()
    for key, matrix in tiles_dict.items():
       for i in range(0, len(prop_matrices)):
          if np.array_equal(matrix, prop_matrices[i]):
             tile_map.update({key: tile_types[i]})

    print(tile_map)
    # automata_min_dict = ({0: (False, {2: 11, 36: 5, 38: 1, 8: 6, 17: 6, 19: 10, 22: 6, 24: 6, 26: 9, 31: 8}), 1: (False, {2: 4, 36: 0, 38: 0, 8: 0, 17: 0, 19: 0, 22: 0, 24: 0, 26: 0, 31: 2}), 2: (False, {2: 3, 36: 0, 38: 0, 8: 0, 17: 0, 19: 0, 22: 0, 24: 0, 26: 0, 31: 0}), 3: (True, {2: 2, 36: 0, 38: 0, 8: 0, 17: 0, 19: 0, 22: 0, 24: 0, 26: 0, 31: 0}), 4: (False, {2: 0, 36: 0, 38: 0, 8: 0, 17: 0, 19: 0, 22: 0, 24: 0, 26: 0, 31: 0}), 5: (True, {2: 6, 36: 0, 38: 0, 8: 0, 17: 0, 19: 0, 22: 0, 24: 0, 26: 0, 31: 0}), 6: (False, {2: 7, 36: 0, 38: 0, 8: 0, 17: 0, 19: 0, 22: 0, 24: 0, 26: 0, 31: 0}), 7: (True, {2: 0, 36: 0, 38: 0, 8: 0, 17: 0, 19: 0, 22: 0, 24: 0, 26: 0, 31: 0}), 8: (True, {2: 7, 36: 0, 38: 2, 8: 0, 17: 0, 19: 0, 22: 0, 24: 0, 26: 3, 31: 0}), 9: (False, {2: 4, 36: 0, 38: 0, 8: 0, 17: 0, 19: 0, 22: 0, 24: 0, 26: 0, 31: 7}), 10: (True, {2: 4, 36: 0, 38: 0, 8: 0, 17: 0, 19: 0, 22: 0, 24: 0, 26: 0, 31: 0}), 11: (True, {2: 4, 36: 2, 38: 4, 8: 3, 17: 7, 19: 4, 22: 3, 24: 3, 26: 4, 31: 7})}, 0)


    """
    automata = dfacopy.DFA(
        start= start vertex,
        inputs= alphabet,
        label= lambda s: f(s)   where f(s) returns true iff s is a final state,
        transition=lambda s, c: function_to_get_trans(s,c),
    )
    """